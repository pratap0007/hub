// Code generated by goa v3.1.3, DO NOT EDIT.
//
// category HTTP server types
//
// Command:
// $ goa gen github.com/tektoncd/hub/api/design

package server

import (
	category "github.com/tektoncd/hub/api/gen/category"
	goa "goa.design/goa/v3/pkg"
)

// AllResponseBody is the type of the "category" service "All" endpoint HTTP
// response body.
type AllResponseBody []*CategoryResponse

// AllInternalErrorResponseBody is the type of the "category" service "All"
// endpoint HTTP response body for the "internal-error" error.
type AllInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CategoryResponse is used to define fields on response body types.
type CategoryResponse struct {
	// unique id of category
	ID uint `form:"id" json:"id" xml:"id"`
	// name of category
	Name string `form:"name" json:"name" xml:"name"`
	// list of tag associated with category
	Tags []*TagResponse `form:"tags" json:"tags" xml:"tags"`
}

// TagResponse is used to define fields on response body types.
type TagResponse struct {
	// Id is the unique id of tags
	ID uint `form:"id" json:"id" xml:"id"`
	// name of tag
	Name string `form:"name" json:"name" xml:"name"`
}

// NewAllResponseBody builds the HTTP response body from the result of the
// "All" endpoint of the "category" service.
func NewAllResponseBody(res []*category.Category) AllResponseBody {
	body := make([]*CategoryResponse, len(res))
	for i, val := range res {
		body[i] = marshalCategoryCategoryToCategoryResponse(val)
	}
	return body
}

// NewAllInternalErrorResponseBody builds the HTTP response body from the
// result of the "All" endpoint of the "category" service.
func NewAllInternalErrorResponseBody(res *goa.ServiceError) *AllInternalErrorResponseBody {
	body := &AllInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}
