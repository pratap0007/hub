// Code generated by goa v3.1.3, DO NOT EDIT.
//
// resourceversions HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/tektoncd/hub/api/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	resourceversions "github.com/tektoncd/hub/api/gen/resourceversions"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// BuildResourceversionsdetailRequest instantiates a HTTP request object with
// method and path set to call the "resourceversions" service
// "Resourceversionsdetail" endpoint
func (c *Client) BuildResourceversionsdetailRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		resourceID int
	)
	{
		p, ok := v.(*resourceversions.ResourceID)
		if !ok {
			return nil, goahttp.ErrInvalidType("resourceversions", "Resourceversionsdetail", "*resourceversions.ResourceID", v)
		}
		resourceID = p.ResourceID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ResourceversionsdetailResourceversionsPath(resourceID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("resourceversions", "Resourceversionsdetail", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeResourceversionsdetailResponse returns a decoder for responses
// returned by the resourceversions Resourceversionsdetail endpoint.
// restoreBody controls whether the response body should be restored after
// having been read.
// DecodeResourceversionsdetailResponse may return the following errors:
//	- "internal-error" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeResourceversionsdetailResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ResourceversionsdetailResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("resourceversions", "Resourceversionsdetail", err)
			}
			for _, e := range body {
				if e != nil {
					if err2 := ValidateResourceversionResponse(e); err2 != nil {
						err = goa.MergeErrors(err, err2)
					}
				}
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("resourceversions", "Resourceversionsdetail", err)
			}
			res := NewResourceversionsdetailResourceversionOK(body)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body ResourceversionsdetailInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("resourceversions", "Resourceversionsdetail", err)
			}
			err = ValidateResourceversionsdetailInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("resourceversions", "Resourceversionsdetail", err)
			}
			return nil, NewResourceversionsdetailInternalError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("resourceversions", "Resourceversionsdetail", resp.StatusCode, string(body))
		}
	}
}

// unmarshalResourceversionResponseToResourceversionsResourceversion builds a
// value of type *resourceversions.Resourceversion from a value of type
// *ResourceversionResponse.
func unmarshalResourceversionResponseToResourceversionsResourceversion(v *ResourceversionResponse) *resourceversions.Resourceversion {
	res := &resourceversions.Resourceversion{
		ID:     *v.ID,
		Name:   *v.Name,
		Type:   *v.Type,
		Rating: *v.Rating,
	}
	res.Catalog = unmarshalCatalogResponseToResourceversionsCatalog(v.Catalog)
	res.Tags = make([]*resourceversions.Tag, len(v.Tags))
	for i, val := range v.Tags {
		res.Tags[i] = unmarshalTagResponseToResourceversionsTag(val)
	}
	res.Versions = make([]*resourceversions.ResourceVersionInfo, len(v.Versions))
	for i, val := range v.Versions {
		res.Versions[i] = unmarshalResourceVersionInfoResponseToResourceversionsResourceVersionInfo(val)
	}

	return res
}

// unmarshalCatalogResponseToResourceversionsCatalog builds a value of type
// *resourceversions.Catalog from a value of type *CatalogResponse.
func unmarshalCatalogResponseToResourceversionsCatalog(v *CatalogResponse) *resourceversions.Catalog {
	res := &resourceversions.Catalog{
		ID:   *v.ID,
		Type: *v.Type,
	}

	return res
}

// unmarshalTagResponseToResourceversionsTag builds a value of type
// *resourceversions.Tag from a value of type *TagResponse.
func unmarshalTagResponseToResourceversionsTag(v *TagResponse) *resourceversions.Tag {
	res := &resourceversions.Tag{
		ID:   *v.ID,
		Name: *v.Name,
	}

	return res
}

// unmarshalResourceVersionInfoResponseToResourceversionsResourceVersionInfo
// builds a value of type *resourceversions.ResourceVersionInfo from a value of
// type *ResourceVersionInfoResponse.
func unmarshalResourceVersionInfoResponseToResourceversionsResourceVersionInfo(v *ResourceVersionInfoResponse) *resourceversions.ResourceVersionInfo {
	res := &resourceversions.ResourceVersionInfo{
		ID:          *v.ID,
		Version:     *v.Version,
		Description: *v.Description,
		DisplayName: *v.DisplayName,
		RawURL:      *v.RawURL,
		WebURL:      *v.WebURL,
		UpdatedAt:   *v.UpdatedAt,
	}

	return res
}
