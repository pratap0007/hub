// Code generated by goa v3.1.3, DO NOT EDIT.
//
// resourceversions HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/tektoncd/hub/api/design

package server

import (
	"context"
	"net/http"
	"strconv"

	resourceversions "github.com/tektoncd/hub/api/gen/resourceversions"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeResourceversionsdetailResponse returns an encoder for responses
// returned by the resourceversions Resourceversionsdetail endpoint.
func EncodeResourceversionsdetailResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.([]*resourceversions.Resourceversion)
		enc := encoder(ctx, w)
		body := NewResourceversionsdetailResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeResourceversionsdetailRequest returns a decoder for requests sent to
// the resourceversions Resourceversionsdetail endpoint.
func DecodeResourceversionsdetailRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			resourceID int
			err        error

			params = mux.Vars(r)
		)
		{
			resourceIDRaw := params["resourceId"]
			v, err2 := strconv.ParseInt(resourceIDRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("resourceID", resourceIDRaw, "integer"))
			}
			resourceID = int(v)
		}
		if err != nil {
			return nil, err
		}
		payload := NewResourceversionsdetailResourceID(resourceID)

		return payload, nil
	}
}

// EncodeResourceversionsdetailError returns an encoder for errors returned by
// the Resourceversionsdetail resourceversions endpoint.
func EncodeResourceversionsdetailError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "internal-error":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewResourceversionsdetailInternalErrorResponseBody(res)
			}
			w.Header().Set("goa-error", "internal-error")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// marshalResourceversionsResourceversionToResourceversionResponse builds a
// value of type *ResourceversionResponse from a value of type
// *resourceversions.Resourceversion.
func marshalResourceversionsResourceversionToResourceversionResponse(v *resourceversions.Resourceversion) *ResourceversionResponse {
	res := &ResourceversionResponse{
		ID:     v.ID,
		Name:   v.Name,
		Type:   v.Type,
		Rating: v.Rating,
	}
	if v.Catalog != nil {
		res.Catalog = marshalResourceversionsCatalogToCatalogResponse(v.Catalog)
	}
	if v.Tags != nil {
		res.Tags = make([]*TagResponse, len(v.Tags))
		for i, val := range v.Tags {
			res.Tags[i] = marshalResourceversionsTagToTagResponse(val)
		}
	}
	if v.Versions != nil {
		res.Versions = make([]*ResourceVersionInfoResponse, len(v.Versions))
		for i, val := range v.Versions {
			res.Versions[i] = marshalResourceversionsResourceVersionInfoToResourceVersionInfoResponse(val)
		}
	}

	return res
}

// marshalResourceversionsCatalogToCatalogResponse builds a value of type
// *CatalogResponse from a value of type *resourceversions.Catalog.
func marshalResourceversionsCatalogToCatalogResponse(v *resourceversions.Catalog) *CatalogResponse {
	res := &CatalogResponse{
		ID:   v.ID,
		Type: v.Type,
	}

	return res
}

// marshalResourceversionsTagToTagResponse builds a value of type *TagResponse
// from a value of type *resourceversions.Tag.
func marshalResourceversionsTagToTagResponse(v *resourceversions.Tag) *TagResponse {
	res := &TagResponse{
		ID:   v.ID,
		Name: v.Name,
	}

	return res
}

// marshalResourceversionsResourceVersionInfoToResourceVersionInfoResponse
// builds a value of type *ResourceVersionInfoResponse from a value of type
// *resourceversions.ResourceVersionInfo.
func marshalResourceversionsResourceVersionInfoToResourceVersionInfoResponse(v *resourceversions.ResourceVersionInfo) *ResourceVersionInfoResponse {
	res := &ResourceVersionInfoResponse{
		ID:          v.ID,
		Version:     v.Version,
		Description: v.Description,
		DisplayName: v.DisplayName,
		RawURL:      v.RawURL,
		WebURL:      v.WebURL,
		UpdatedAt:   v.UpdatedAt,
	}

	return res
}
