// Code generated by goa v3.1.3, DO NOT EDIT.
//
// hub HTTP client CLI support package
//
// Command:
// $ goa gen github.com/tektoncd/hub/api/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	categoryc "github.com/tektoncd/hub/api/gen/http/category/client"
	resourceversionsc "github.com/tektoncd/hub/api/gen/http/resourceversions/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `category all
resourceversions resourceversionsdetail
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` category all` + "\n" +
		os.Args[0] + ` resourceversions resourceversionsdetail --resource-id 2080206299815314743` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		categoryFlags = flag.NewFlagSet("category", flag.ContinueOnError)

		categoryAllFlags = flag.NewFlagSet("all", flag.ExitOnError)

		resourceversionsFlags = flag.NewFlagSet("resourceversions", flag.ContinueOnError)

		resourceversionsResourceversionsdetailFlags          = flag.NewFlagSet("resourceversionsdetail", flag.ExitOnError)
		resourceversionsResourceversionsdetailResourceIDFlag = resourceversionsResourceversionsdetailFlags.String("resource-id", "REQUIRED", "id of resource")
	)
	categoryFlags.Usage = categoryUsage
	categoryAllFlags.Usage = categoryAllUsage

	resourceversionsFlags.Usage = resourceversionsUsage
	resourceversionsResourceversionsdetailFlags.Usage = resourceversionsResourceversionsdetailUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "category":
			svcf = categoryFlags
		case "resourceversions":
			svcf = resourceversionsFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "category":
			switch epn {
			case "all":
				epf = categoryAllFlags

			}

		case "resourceversions":
			switch epn {
			case "resourceversionsdetail":
				epf = resourceversionsResourceversionsdetailFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "category":
			c := categoryc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "all":
				endpoint = c.All()
				data = nil
			}
		case "resourceversions":
			c := resourceversionsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "resourceversionsdetail":
				endpoint = c.Resourceversionsdetail()
				data, err = resourceversionsc.BuildResourceversionsdetailPayload(*resourceversionsResourceversionsdetailResourceIDFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// categoryUsage displays the usage of the category command and its subcommands.
func categoryUsage() {
	fmt.Fprintf(os.Stderr, `The category service gives category details
Usage:
    %s [globalflags] category COMMAND [flags]

COMMAND:
    all: Get all Categories with their tags sorted by name

Additional help:
    %s category COMMAND --help
`, os.Args[0], os.Args[0])
}
func categoryAllUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] category all

Get all Categories with their tags sorted by name

Example:
    `+os.Args[0]+` category all
`, os.Args[0])
}

// resourceversionsUsage displays the usage of the resourceversions command and
// its subcommands.
func resourceversionsUsage() {
	fmt.Fprintf(os.Stderr, `The category service gives category details
Usage:
    %s [globalflags] resourceversions COMMAND [flags]

COMMAND:
    resourceversionsdetail: Get all versions information of a resource by resourceId

Additional help:
    %s resourceversions COMMAND --help
`, os.Args[0], os.Args[0])
}
func resourceversionsResourceversionsdetailUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] resourceversions resourceversionsdetail -resource-id INT

Get all versions information of a resource by resourceId
    -resource-id INT: id of resource

Example:
    `+os.Args[0]+` resourceversions resourceversionsdetail --resource-id 2080206299815314743
`, os.Args[0])
}
